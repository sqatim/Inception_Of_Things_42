# -*- mode: ruby -*-
# vi: set ft=ruby :

server_ip = "192.168.56.110"
worker_ip = "192.168.56.111"
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.define "sqatimS" do |control|
    control.vm.hostname = "sqatimS"
    control.vm.box = "centos/7"
    control.vm.network "private_network", bridge: "eth1", ip: server_ip
    control.trigger.after :up   do |trigger|
      trigger.name = "Finished Message"
      trigger.info = "Machine is up!"
      trigger.run = {inline: 'vagrant scp sqatimS:/var/lib/rancher/k3s/server/node-token .'}
    end
    control.vm.provision "shell" do |sh|
      sh.inline = <<-SCRIPT
      export INSTALL_K3S_EXEC="--bind-address=#{server_ip} --node-external-ip=#{server_ip} --flannel-iface=eth1"
      curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
      chmod -R 777 /var/lib/rancher/k3s/server
      SCRIPT
    end
    control.vm.provider "virtualbox" do |vb|
      vb.name = "sqatimS"
      vb.memory = 1024
      vb.cpus = 1
    end
  end

  config.vm.define "sqatimSW" do |control|
    control.vm.hostname = "sqatimSW"
    control.vm.box = "centos/7"
    control.vm.network "private_network", bridge: "eth1", ip: worker_ip
    control.trigger.after :up   do |trigger|
      trigger.name = "---------------------------- UP Message ----------------------------"
      trigger.info = "Token deleted"
      trigger.run = {inline: 'rm -rf node-token'}
    end
    control.vm.provision "shell" do |sh|
      sh.inline = <<-SCRIPT
      export INSTALL_K3S_EXEC="--node-ip=#{worker_ip}"
      curl -sfL https://get.k3s.io | K3S_URL=https://192.168.56.110:6443 K3S_TOKEN=`cat /vagrant/node-token` sh -
      rm -rf /vagrant/node-token
      SCRIPT
    end
    control.vm.provider "virtualbox" do |vb|
      vb.name = "sqatimSW"
      vb.memory = 1024
      vb.cpus = 1
    end
  end
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
